{"version":3,"sources":["../node_modules/sinon-chai/lib/sinon-chai.js"],"names":[],"mappings":";;AAqJA,IAAA,GAlJA,SAAA,GAIA,mBAAA,SAAA,iBAAA,SAAA,iBAAA,OAEA,OAAA,QAAA,EACA,mBAAA,GAAA,EAAA,IAEA,EAAA,WACA,OAAA,IAKA,KAAA,IAAA,GAfA,CAiBA,SAAA,EAAA,GACA,IAiEA,EAAA,EAAA,EAjEA,EAAA,MAAA,UAAA,MAEA,SAAA,EAAA,GACA,MAAA,mBAAA,GACA,mBAAA,EAAA,SACA,mBAAA,EAAA,kBAGA,SAAA,EAAA,GACA,OAAA,GACA,KAAA,EACA,MAAA,OAEA,KAAA,EACA,MAAA,QAEA,KAAA,EACA,MAAA,SAEA,QACA,OAAA,GAAA,GAAA,UASA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,UALA,EAKA,EAAA,QAJA,EAAA,EAAA,QAKA,MAAA,IAAA,UAAA,EAAA,QAAA,EAAA,MAAA,qCANA,IAAA,EAUA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,eAAA,QAMA,SAAA,EAAA,GACA,OAAA,EAAA,OAAA,MAAA,EAAA,GAGA,OATA,EAAA,GAAA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,OAOA,CACA,YAAA,WACA,OAAA,EAAA,CAAA,kBAAA,EAAA,EAAA,GAAA,OAAA,KAEA,SAAA,WACA,OAAA,EAAA,CAAA,sBAAA,EAAA,GAAA,OAAA,MAKA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,EAAA,UAAA,UAAA,EAAA,WACA,EAAA,MAEA,IAAA,EAAA,EAAA,KAAA,KAAA,EAAA,GAAA,GACA,KAAA,OAAA,KAAA,KAAA,GAAA,EAAA,YAAA,EAAA,YAaA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,WACA,EAAA,MAEA,IAAA,EAAA,SAAA,EAAA,GAAA,cAAA,EAAA,UAAA,GACA,EAAA,EAAA,KAAA,KAAA,WAAA,mBAAA,KAAA,KAAA,GACA,EAAA,EAAA,EAAA,EAEA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,KAAA,YACA,KAAA,OACA,KAAA,KAAA,GAAA,MAAA,KAAA,KAAA,WACA,EAAA,YACA,EAAA,WAUA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,UAAA,UAAA,EAAA,GAGA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GAGA,EAAA,YAAA,EAAA,UAAA,UAAA,SAAA,WACA,EAAA,KAAA,KAAA,UAAA,KAGA,EAAA,SAAA,cAAA,2CA5CA,EA6CA,YA7CA,EA6CA,yBA7CA,EA6CA,2BA5CA,EAAA,UAAA,EAAA,UAAA,UAAA,EAAA,SAAA,GACA,EAAA,MAEA,IAAA,EAAA,EAAA,KAAA,KAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KACA,KAAA,OAAA,KAAA,KAAA,KAAA,EAAA,EAAA,YAAA,EAAA,YAyCA,EAAA,aAAA,2BAAA,4BACA,EAAA,cAAA,4BAAA,4BACA,EAAA,eAAA,6BAAA,4BAtBA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,EAAA,UAAA,UAAA,EAAA,GAqBA,CAAA,gBAAA,wBACA,EAAA,eAAA,yBACA,EAAA,cAAA,wBACA,EAAA,0BAAA,qCACA,EAAA,yBAAA,oCACA,EAAA,WAAA,8BAAA,uCACA,EAAA,aAAA,gCAAA,MACA,EAAA,iBAAA,6CAAA,MACA,EAAA,oBAAA,sCAAA,MACA,EAAA,wBAAA,mDAAA,MACA,EAAA,kBAAA,yCAAA,MACA,EAAA,WAAA,eACA,EAAA,SAAA,QAAA","file":"sinon-chai.6e4aad66.js","sourceRoot":"..\\test","sourcesContent":["\"use strict\";\r\n/* eslint-disable no-invalid-this */\r\n\r\n(function (sinonChai) {\r\n    // Module systems magic dance.\r\n\r\n    /* istanbul ignore else */\r\n    if (typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\") {\r\n        // NodeJS\r\n        module.exports = sinonChai;\r\n    } else if (typeof define === \"function\" && define.amd) {\r\n        // AMD\r\n        define(function () {\r\n            return sinonChai;\r\n        });\r\n    } else {\r\n        // Other environment (usually <script> tag): plug in to global chai instance directly.\r\n        /* global chai: false */\r\n        chai.use(sinonChai);\r\n    }\r\n}(function (chai, utils) {\r\n    var slice = Array.prototype.slice;\r\n\r\n    function isSpy(putativeSpy) {\r\n        return typeof putativeSpy === \"function\" &&\r\n               typeof putativeSpy.getCall === \"function\" &&\r\n               typeof putativeSpy.calledWithExactly === \"function\";\r\n    }\r\n\r\n    function timesInWords(count) {\r\n        switch (count) {\r\n            case 1: {\r\n                return \"once\";\r\n            }\r\n            case 2: {\r\n                return \"twice\";\r\n            }\r\n            case 3: {\r\n                return \"thrice\";\r\n            }\r\n            default: {\r\n                return (count || 0) + \" times\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function isCall(putativeCall) {\r\n        return putativeCall && isSpy(putativeCall.proxy);\r\n    }\r\n\r\n    function assertCanWorkWith(assertion) {\r\n        if (!isSpy(assertion._obj) && !isCall(assertion._obj)) {\r\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a spy or a call to a spy!\");\r\n        }\r\n    }\r\n\r\n    function getMessages(spy, action, nonNegatedSuffix, always, args) {\r\n        var verbPhrase = always ? \"always have \" : \"have \";\r\n        nonNegatedSuffix = nonNegatedSuffix || \"\";\r\n        if (isSpy(spy.proxy)) {\r\n            spy = spy.proxy;\r\n        }\r\n\r\n        function printfArray(array) {\r\n            return spy.printf.apply(spy, array);\r\n        }\r\n\r\n        return {\r\n            affirmative: function () {\r\n                return printfArray([\"expected %n to \" + verbPhrase + action + nonNegatedSuffix].concat(args));\r\n            },\r\n            negative: function () {\r\n                return printfArray([\"expected %n to not \" + verbPhrase + action].concat(args));\r\n            }\r\n        };\r\n    }\r\n\r\n    function sinonProperty(name, action, nonNegatedSuffix) {\r\n        utils.addProperty(chai.Assertion.prototype, name, function () {\r\n            assertCanWorkWith(this);\r\n\r\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, false);\r\n            this.assert(this._obj[name], messages.affirmative, messages.negative);\r\n        });\r\n    }\r\n\r\n    function sinonPropertyAsBooleanMethod(name, action, nonNegatedSuffix) {\r\n        utils.addMethod(chai.Assertion.prototype, name, function (arg) {\r\n            assertCanWorkWith(this);\r\n\r\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, false, [timesInWords(arg)]);\r\n            this.assert(this._obj[name] === arg, messages.affirmative, messages.negative);\r\n        });\r\n    }\r\n\r\n    function createSinonMethodHandler(sinonName, action, nonNegatedSuffix) {\r\n        return function () {\r\n            assertCanWorkWith(this);\r\n\r\n            var alwaysSinonMethod = \"always\" + sinonName[0].toUpperCase() + sinonName.substring(1);\r\n            var shouldBeAlways = utils.flag(this, \"always\") && typeof this._obj[alwaysSinonMethod] === \"function\";\r\n            var sinonMethodName = shouldBeAlways ? alwaysSinonMethod : sinonName;\r\n\r\n            var messages = getMessages(this._obj, action, nonNegatedSuffix, shouldBeAlways, slice.call(arguments));\r\n            this.assert(\r\n                this._obj[sinonMethodName].apply(this._obj, arguments),\r\n                messages.affirmative,\r\n                messages.negative\r\n            );\r\n        };\r\n    }\r\n\r\n    function sinonMethodAsProperty(name, action, nonNegatedSuffix) {\r\n        var handler = createSinonMethodHandler(name, action, nonNegatedSuffix);\r\n        utils.addProperty(chai.Assertion.prototype, name, handler);\r\n    }\r\n\r\n    function exceptionalSinonMethod(chaiName, sinonName, action, nonNegatedSuffix) {\r\n        var handler = createSinonMethodHandler(sinonName, action, nonNegatedSuffix);\r\n        utils.addMethod(chai.Assertion.prototype, chaiName, handler);\r\n    }\r\n\r\n    function sinonMethod(name, action, nonNegatedSuffix) {\r\n        exceptionalSinonMethod(name, name, action, nonNegatedSuffix);\r\n    }\r\n\r\n    utils.addProperty(chai.Assertion.prototype, \"always\", function () {\r\n        utils.flag(this, \"always\", true);\r\n    });\r\n\r\n    sinonProperty(\"called\", \"been called\", \" at least once, but it was never called\");\r\n    sinonPropertyAsBooleanMethod(\"callCount\", \"been called exactly %1\", \", but it was called %c%C\");\r\n    sinonProperty(\"calledOnce\", \"been called exactly once\", \", but it was called %c%C\");\r\n    sinonProperty(\"calledTwice\", \"been called exactly twice\", \", but it was called %c%C\");\r\n    sinonProperty(\"calledThrice\", \"been called exactly thrice\", \", but it was called %c%C\");\r\n    sinonMethodAsProperty(\"calledWithNew\", \"been called with new\");\r\n    sinonMethod(\"calledBefore\", \"been called before %1\");\r\n    sinonMethod(\"calledAfter\", \"been called after %1\");\r\n    sinonMethod(\"calledImmediatelyBefore\", \"been called immediately before %1\");\r\n    sinonMethod(\"calledImmediatelyAfter\", \"been called immediately after %1\");\r\n    sinonMethod(\"calledOn\", \"been called with %1 as this\", \", but it was called with %t instead\");\r\n    sinonMethod(\"calledWith\", \"been called with arguments %*\", \"%D\");\r\n    sinonMethod(\"calledOnceWith\", \"been called exactly once with arguments %*\", \"%D\");\r\n    sinonMethod(\"calledWithExactly\", \"been called with exact arguments %*\", \"%D\");\r\n    sinonMethod(\"calledOnceWithExactly\", \"been called exactly once with exact arguments %*\", \"%D\");\r\n    sinonMethod(\"calledWithMatch\", \"been called with arguments matching %*\", \"%D\");\r\n    sinonMethod(\"returned\", \"returned %1\");\r\n    exceptionalSinonMethod(\"thrown\", \"threw\", \"thrown %1\");\r\n}));\r\n"]}